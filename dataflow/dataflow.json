{
	"name": "dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Ds_url_csv",
						"type": "DatasetReference"
					},
					"name": "LecturaCovid"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Ds_silver_csv",
						"type": "DatasetReference"
					},
					"name": "SalidaparaSilver",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "CreacioNuevaColumanas"
				}
			],
			"scriptLines": [
				"source(output(",
				"          iso_code as string,",
				"          continent as string,",
				"          location as string,",
				"          date as string,",
				"          total_cases as string,",
				"          new_cases as string,",
				"          new_cases_smoothed as string,",
				"          total_deaths as string,",
				"          new_deaths as string,",
				"          new_deaths_smoothed as string,",
				"          total_cases_per_million as string,",
				"          new_cases_per_million as string,",
				"          new_cases_smoothed_per_million as string,",
				"          total_deaths_per_million as string,",
				"          new_deaths_per_million as string,",
				"          new_deaths_smoothed_per_million as string,",
				"          reproduction_rate as string,",
				"          icu_patients as string,",
				"          icu_patients_per_million as string,",
				"          hosp_patients as string,",
				"          hosp_patients_per_million as string,",
				"          weekly_icu_admissions as string,",
				"          weekly_icu_admissions_per_million as string,",
				"          weekly_hosp_admissions as string,",
				"          weekly_hosp_admissions_per_million as string,",
				"          total_tests as string,",
				"          new_tests as string,",
				"          total_tests_per_thousand as string,",
				"          new_tests_per_thousand as string,",
				"          new_tests_smoothed as string,",
				"          new_tests_smoothed_per_thousand as string,",
				"          positive_rate as string,",
				"          tests_per_case as string,",
				"          tests_units as string,",
				"          total_vaccinations as string,",
				"          people_vaccinated as string,",
				"          people_fully_vaccinated as string,",
				"          total_boosters as string,",
				"          new_vaccinations as string,",
				"          new_vaccinations_smoothed as string,",
				"          total_vaccinations_per_hundred as string,",
				"          people_vaccinated_per_hundred as string,",
				"          people_fully_vaccinated_per_hundred as string,",
				"          total_boosters_per_hundred as string,",
				"          new_vaccinations_smoothed_per_million as string,",
				"          new_people_vaccinated_smoothed as string,",
				"          new_people_vaccinated_smoothed_per_hundred as string,",
				"          stringency_index as string,",
				"          population_density as string,",
				"          median_age as string,",
				"          aged_65_older as string,",
				"          aged_70_older as string,",
				"          gdp_per_capita as string,",
				"          extreme_poverty as string,",
				"          cardiovasc_death_rate as string,",
				"          diabetes_prevalence as string,",
				"          female_smokers as string,",
				"          male_smokers as string,",
				"          handwashing_facilities as string,",
				"          hospital_beds_per_thousand as string,",
				"          life_expectancy as string,",
				"          human_development_index as string,",
				"          population as string,",
				"          excess_mortality_cumulative_absolute as string,",
				"          excess_mortality_cumulative as string,",
				"          excess_mortality as string,",
				"          excess_mortality_cumulative_per_million as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> LecturaCovid",
				"LecturaCovid derive(Anio = toInteger(trim(left(date, 4))),",
				"          Mes = toInteger(trim(right(left(date,7),2)))) ~> CreacioNuevaColumanas",
				"CreacioNuevaColumanas sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          continent as string,",
				"          location as string,",
				"          date as string,",
				"          total_cases as string,",
				"          new_cases as string,",
				"          new_cases_smoothed as string,",
				"          total_deaths as string,",
				"          new_deaths as string,",
				"          new_deaths_smoothed as string,",
				"          total_cases_per_million as string,",
				"          new_cases_per_million as string,",
				"          new_cases_smoothed_per_million as string,",
				"          total_deaths_per_million as string,",
				"          new_deaths_per_million as string,",
				"          new_deaths_smoothed_per_million as string,",
				"          reproduction_rate as string,",
				"          icu_patients as string,",
				"          icu_patients_per_million as string,",
				"          hosp_patients as string,",
				"          hosp_patients_per_million as string,",
				"          weekly_icu_admissions as string,",
				"          weekly_icu_admissions_per_million as string,",
				"          weekly_hosp_admissions as string,",
				"          weekly_hosp_admissions_per_million as string,",
				"          total_tests as string,",
				"          new_tests as string,",
				"          total_tests_per_thousand as string,",
				"          new_tests_per_thousand as string,",
				"          new_tests_smoothed as string,",
				"          new_tests_smoothed_per_thousand as string,",
				"          positive_rate as string,",
				"          tests_per_case as string,",
				"          tests_units as string,",
				"          total_vaccinations as string,",
				"          people_vaccinated as string,",
				"          people_fully_vaccinated as string,",
				"          total_boosters as string,",
				"          new_vaccinations as string,",
				"          new_vaccinations_smoothed as string,",
				"          total_vaccinations_per_hundred as string,",
				"          people_vaccinated_per_hundred as string,",
				"          people_fully_vaccinated_per_hundred as string,",
				"          total_boosters_per_hundred as string,",
				"          new_vaccinations_smoothed_per_million as string,",
				"          new_people_vaccinated_smoothed as string,",
				"          new_people_vaccinated_smoothed_per_hundred as string,",
				"          stringency_index as string,",
				"          population_density as string,",
				"          median_age as string,",
				"          aged_65_older as string,",
				"          aged_70_older as string,",
				"          gdp_per_capita as string,",
				"          extreme_poverty as string,",
				"          cardiovasc_death_rate as string,",
				"          diabetes_prevalence as string,",
				"          female_smokers as string,",
				"          male_smokers as string,",
				"          handwashing_facilities as string,",
				"          hospital_beds_per_thousand as string,",
				"          life_expectancy as string,",
				"          human_development_index as string,",
				"          population as string,",
				"          excess_mortality_cumulative_absolute as string,",
				"          excess_mortality_cumulative as string,",
				"          excess_mortality as string,",
				"          excess_mortality_cumulative_per_million as string",
				"     ),",
				"     partitionFileNames:['covid_global.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          each(match(/* All input columns */true()),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     partitionBy('hash', 1)) ~> SalidaparaSilver"
			]
		}
	}
}